/*
1. Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999, мы должны получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 мы должны получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект.
*/

function numObj(num) {
    const obj = {}

    if (String(num).length > 3) return console.log(obj), console.log("Число должно быть не больше 999!");
    else if (String(num).length === 3) {
        obj.units = +(String(num).slice(-1));
        obj.dozens = +(String(num).slice(1, 2));
        obj.hundreds = +(String(num).slice(0, 1));
        return console.log(obj);
    }
    else if (String(num).length === 2) {
        obj.units = +(String(num).slice(-1));
        obj.dozens = +(String(num).slice(0, 1));
        obj.hundreds = 0;
        return console.log(obj);
    }
    else {
        obj.units = num;
        obj.dozens = 0;
        obj.hundreds = 0;
        return console.log(obj);
    }

}


numObj(1234);
numObj(6);
numObj(45);
numObj(456);


/*
2.Продолжить работу с интернет-магазином:
2.1. В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
2.2. Реализуйте такие объекты.
2.3. Перенести функционал подсчета корзины на объектно-ориентированную базу.
*/

const basketObj = {
    product: {},
    basket: [],
    BasketAdd(name, cost, count) {
        this.product.name = name;
        this.product.cost = cost;
        this.product.count = count;
        this.basket.push(this.product);
        this.product = {};
    },
    countBasketPrice() {
        let total = 0;
        for (let i = 0; i < this.basket.length; i++) {
            total += this.basket[i]["cost"] * this.basket[i]["count"];
        }
        return total;
    }
};

basketObj.BasketAdd("Arduino Mega 2560 R3", 5800, 4);
basketObj.BasketAdd("NUCLEO-F401RE", 1870, 2);
basketObj.BasketAdd("Raspberry Pi 4 Model B 8GB", 9900, 1);

countBasket = basketObj.countBasketPrice();
console.log(`Товаров в корзине на сумму ${countBasket} руб`);


/*
3.* Подумать над глобальными сущностями. К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в разных местах давал возможность вызывать разные методы.
*/

/*
Пока я просто реализовал весь функционал прямо в объекте корзина. Ничто мне впринципе не помешает вынуть объект продукт из неё и подружить его и с другими объектами и их методами. Обычно я привык выполнять чёткую задачу в зависимости от ситуации. Пока что я не совсем знаю чётко как они будут взаимодействовать точно между собой. Мне будет проще это понять как только вы дадите чёткую задачу это реализовать в домашней работе. Просто подумать пока что мне не достаточно чтоб увидеть как всё это будет целиком. Но однако я понимаю что конечно будет удобнее если каждый объект будет выполнять свою роль и будет удобен для взаимодействия в том числе между другими объектами и их методами.
*/
